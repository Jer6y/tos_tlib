<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [32_TOS\32_TOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 32_TOS\32_TOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6070001: Last Updated: Sat Sep 16 15:05:07 2023
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
test &rArr; tos_kv_init &rArr; kv_mgr_ctl_build &rArr; kv_handle_incomplete_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a9]">syscall</a>
 <LI><a href="#[34]">tool_goto_adrs_asm</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Test_1</a> from app_entry.o(.text.Test_1) referenced 2 times from app_entry.o(.text.cmd_chk_func)
 <LI><a href="#[1]">Test_2</a> from app_entry.o(.text.Test_2) referenced 2 times from app_entry.o(.text.cmd_chk_func)
 <LI><a href="#[f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[15]">cmd_chk_adrs</a> from app_entry.o(.text.cmd_chk_adrs) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[14]">cmd_chk_func</a> from app_entry.o(.text.cmd_chk_func) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[12]">cmd_free</a> from tos_shell_commands.o(.text.cmd_free) referenced from tos_shell_commands.o(.rodata.builtin_shell_cmds)
 <LI><a href="#[13]">cmd_goto</a> from app_entry.o(.text.cmd_goto) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[10]">cmd_help</a> from tos_shell_commands.o(.text.cmd_help) referenced from tos_shell_commands.o(.rodata.builtin_shell_cmds)
 <LI><a href="#[1a]">cmd_kv_del</a> from app_entry.o(.text.cmd_kv_del) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[1b]">cmd_kv_find</a> from app_entry.o(.text.cmd_kv_find) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[19]">cmd_kv_set</a> from app_entry.o(.text.cmd_kv_set) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[18]">cmd_kv_walk</a> from app_entry.o(.text.cmd_kv_walk) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[1c]">cmd_post</a> from app_entry.o(.text.cmd_post) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[11]">cmd_ps</a> from tos_shell_commands.o(.text.cmd_ps) referenced from tos_shell_commands.o(.rodata.builtin_shell_cmds)
 <LI><a href="#[17]">cmd_read_bt</a> from app_entry.o(.text.cmd_read_bt) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[16]">cmd_write_bt</a> from app_entry.o(.text.cmd_write_bt) referenced from app_entry.o(.rodata.user_shell_commands)
 <LI><a href="#[8]">erase_flash</a> from app_entry.o(.text.erase_flash) referenced 2 times from app_entry.o(.text.test)
 <LI><a href="#[e]">fputc</a> from tool.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3]">kv_item_do_fetch</a> from tos_kv.o(.text.kv_item_do_fetch) referenced 2 times from tos_kv.o(.text.kv_item_do_find)
 <LI><a href="#[4]">kv_item_do_fetch_new_copy</a> from tos_kv.o(.text.kv_item_do_fetch_new_copy) referenced 2 times from tos_kv.o(.text.kv_item_do_find_new_copy)
 <LI><a href="#[2]">kv_item_do_gc</a> from tos_kv.o(.text.kv_item_do_gc) referenced 2 times from tos_kv.o(.text.kv_do_gc)
 <LI><a href="#[5]">kv_item_do_recovery</a> from tos_kv.o(.text.kv_item_do_recovery) referenced 2 times from tos_kv.o(.text.kv_mgr_index_build)
 <LI><a href="#[b]">out</a> from app_entry.o(.text.out) referenced 2 times from app_entry.o(.text.test)
 <LI><a href="#[7]">read_flash</a> from app_entry.o(.text.read_flash) referenced 2 times from app_entry.o(.text.test)
 <LI><a href="#[c]">rx_hook</a> from app_entry.o(.text.rx_hook) referenced 2 times from app_entry.o(.text.test)
 <LI><a href="#[d]">shell_parser</a> from tos_shell.o(.text.shell_parser) referenced 2 times from tos_shell.o(.text.tos_shell_init)
 <LI><a href="#[1d]">test</a> from app_entry.o(.text.test) referenced 2 times from app_entry.o(.ARM.__at_0x0803f000)
 <LI><a href="#[9]">thread_1</a> from app_entry.o(.text.thread_1) referenced 2 times from app_entry.o(.text.test)
 <LI><a href="#[a]">thread_2</a> from app_entry.o(.text.thread_2) referenced 2 times from app_entry.o(.text.test)
 <LI><a href="#[6]">write_flash</a> from app_entry.o(.text.write_flash) referenced 2 times from app_entry.o(.text.test)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>init_load</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tool.o(.ARM.__at_0x08030000), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_load
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_deinit
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
</UL>

<P><STRONG><a name="[22]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_set
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_chk_adrs
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_argv_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_argv_address
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_has_key
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_fetch
</UL>

<P><STRONG><a name="[92]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_find
</UL>

<P><STRONG><a name="[72]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_value_is_match
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_is_moved
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_fetch_new_copy
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_fetch
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[eb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[ec]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ed]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[0]"></a>Test_1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_entry.o(.text.Test_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Test_1 &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.cmd_chk_func)
</UL>
<P><STRONG><a name="[1]"></a>Test_2</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_entry.o(.text.Test_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Test_2 &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.cmd_chk_func)
</UL>
<P><STRONG><a name="[15]"></a>cmd_chk_adrs</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, app_entry.o(.text.cmd_chk_adrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cmd_chk_adrs &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[14]"></a>cmd_chk_func</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, app_entry.o(.text.cmd_chk_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cmd_chk_func &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[13]"></a>cmd_goto</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, app_entry.o(.text.cmd_goto))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = cmd_goto &rArr; parse_argv_address
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_goto_adrs_asm
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_argv_address
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[10]"></a>cmd_help</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tos_shell_commands.o(.text.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmd_help &rArr; tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_shell_commands.o(.rodata.builtin_shell_cmds)
</UL>
<P><STRONG><a name="[1a]"></a>cmd_kv_del</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, app_entry.o(.text.cmd_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cmd_kv_del &rArr; tos_kv_del &rArr; kv_item_find &rArr; kv_item_do_find &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[1b]"></a>cmd_kv_find</STRONG> (Thumb, 164 bytes, Stack size 192 bytes, app_entry.o(.text.cmd_kv_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = cmd_kv_find &rArr; tos_kv_get &rArr; kv_item_find &rArr; kv_item_do_find &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[19]"></a>cmd_kv_set</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, app_entry.o(.text.cmd_kv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = cmd_kv_set &rArr; tos_kv_set &rArr; kv_item_update &rArr; kv_item_save &rArr; kv_item_fix &rArr; kv_item_find_new_copy &rArr; kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[18]"></a>cmd_kv_walk</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, app_entry.o(.text.cmd_kv_walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cmd_kv_walk &rArr; tos_kv_walkthru &rArr; kv_block_walkthru &rArr; kv_u8_disp &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_walkthru
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[1c]"></a>cmd_post</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, app_entry.o(.text.cmd_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = cmd_post &rArr; tos_sem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[17]"></a>cmd_read_bt</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, app_entry.o(.text.cmd_read_bt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cmd_read_bt &rArr; parse_argv_address
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_argv_address
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[16]"></a>cmd_write_bt</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, app_entry.o(.text.cmd_write_bt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cmd_write_bt &rArr; parse_argv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_argv_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_argv_address
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.rodata.user_shell_commands)
</UL>
<P><STRONG><a name="[8]"></a>erase_flash</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, app_entry.o(.text.erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = erase_flash &rArr; tos_io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_io_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[e]"></a>fputc</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, tool.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; tos_io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[b]"></a>out</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_entry.o(.text.out))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = out &rArr; fputc &rArr; tos_io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[7]"></a>read_flash</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, app_entry.o(.text.read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = read_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[c]"></a>rx_hook</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, app_entry.o(.text.rx_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = rx_hook &rArr; tos_shell_input_byte &rArr; tos_chr_fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_input_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[91]"></a>shell_cmd_find</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tos_shell_commands.o(.text.shell_cmd_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_cmd_find &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_do_process
</UL>

<P><STRONG><a name="[93]"></a>shell_cmd_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_shell_commands.o(.text.shell_cmd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_cmd_init &rArr; tos_slist_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_slist_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_slist_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
</UL>

<P><STRONG><a name="[97]"></a>shell_cmd_set_regiser</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_shell_commands.o(.text.shell_cmd_set_regiser), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_slist_contains
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_slist_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_cmd_set_regiser
</UL>

<P><STRONG><a name="[99]"></a>shell_cmd_set_unregiser</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_shell_commands.o(.text.shell_cmd_set_unregiser), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_slist_del
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_slist_contains
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_cmd_set_unregiser
</UL>

<P><STRONG><a name="[1d]"></a>test</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, app_entry.o(.text.test))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = test &rArr; tos_kv_init &rArr; kv_mgr_ctl_build &rArr; kv_handle_incomplete_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_io_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.ARM.__at_0x0803f000)
</UL>
<P><STRONG><a name="[9]"></a>thread_1</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_entry.o(.text.thread_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = thread_1 &rArr; tos_sem_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[a]"></a>thread_2</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_entry.o(.text.thread_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = thread_2 &rArr; tos_task_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[a8]"></a>tos_chr_fifo_create</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, tlib_usr.o(.text.tos_chr_fifo_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_create
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
</UL>

<P><STRONG><a name="[aa]"></a>tos_chr_fifo_create_dyn</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_chr_fifo_create_dyn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[ab]"></a>tos_chr_fifo_destroy</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_chr_fifo_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
</UL>

<P><STRONG><a name="[ac]"></a>tos_chr_fifo_destroy_dyn</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_chr_fifo_destroy_dyn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[ad]"></a>tos_chr_fifo_flush</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_chr_fifo_flush), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[ae]"></a>tos_chr_fifo_is_empty</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_chr_fifo_is_empty), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[af]"></a>tos_chr_fifo_is_full</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_chr_fifo_is_full), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[9d]"></a>tos_chr_fifo_pop</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_chr_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_getchar
</UL>

<P><STRONG><a name="[b0]"></a>tos_chr_fifo_pop_stream</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, tlib_usr.o(.text.tos_chr_fifo_pop_stream), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b1]"></a>tos_chr_fifo_push</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_chr_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_chr_fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_input_byte
</UL>

<P><STRONG><a name="[b2]"></a>tos_chr_fifo_push_stream</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, tlib_usr.o(.text.tos_chr_fifo_push_stream), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b3]"></a>tos_event_create</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_event_create), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b4]"></a>tos_event_destroy</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_event_destroy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b5]"></a>tos_event_pend</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, tlib_usr.o(.text.tos_event_pend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b6]"></a>tos_event_post</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_event_post), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b7]"></a>tos_event_post_keep</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_event_post_keep), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[a5]"></a>tos_io_control</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tlib_usr.o(.text.tos_io_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_io_control
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3d]"></a>tos_io_write</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, tlib_usr.o(.text.tos_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
</UL>

<P><STRONG><a name="[83]"></a>tos_knl_is_running</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tlib_usr.o(.text.tos_knl_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_lock
</UL>

<P><STRONG><a name="[b8]"></a>tos_knl_sched_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tlib_usr.o(.text.tos_knl_sched_lock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[b9]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tlib_usr.o(.text.tos_knl_sched_unlock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[ba]"></a>tos_kv_deinit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_kv.o(.text.tos_kv_deinit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_deinit
</UL>

<P><STRONG><a name="[36]"></a>tos_kv_del</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, tos_kv.o(.text.tos_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tos_kv_del &rArr; kv_item_find &rArr; kv_item_do_find &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_lock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_del
</UL>

<P><STRONG><a name="[37]"></a>tos_kv_get</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, tos_kv.o(.text.tos_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tos_kv_get &rArr; kv_item_find &rArr; kv_item_do_find &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_lock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_find
</UL>

<P><STRONG><a name="[bb]"></a>tos_kv_has_key</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tos_kv.o(.text.tos_kv_has_key), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_lock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[a1]"></a>tos_kv_init</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, tos_kv.o(.text.tos_kv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tos_kv_init &rArr; kv_mgr_ctl_build &rArr; kv_handle_incomplete_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_param_verify
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_workspace_locate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_ctl_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[38]"></a>tos_kv_set</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, tos_kv.o(.text.tos_kv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tos_kv_set &rArr; kv_item_update &rArr; kv_item_save &rArr; kv_item_fix &rArr; kv_item_find_new_copy &rArr; kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_lock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_set
</UL>

<P><STRONG><a name="[39]"></a>tos_kv_walkthru</STRONG> (Thumb, 408 bytes, Stack size 104 bytes, tos_kv.o(.text.tos_kv_walkthru))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tos_kv_walkthru &rArr; kv_block_walkthru &rArr; kv_u8_disp &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_hdr_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_walk
</UL>

<P><STRONG><a name="[be]"></a>tos_mmblk_alloc</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_mmblk_alloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[bf]"></a>tos_mmblk_free</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_mmblk_free), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[c0]"></a>tos_mmblk_pool_create</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, tlib_usr.o(.text.tos_mmblk_pool_create), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[c1]"></a>tos_mmheap_aligned_alloc</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, tlib_usr.o(.text.tos_mmheap_aligned_alloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[60]"></a>tos_mmheap_alloc</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_mmheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[31]"></a>tos_mmheap_check</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mmheap_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_check
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[6d]"></a>tos_mmheap_free</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_deinit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_is_moved
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
</UL>

<P><STRONG><a name="[c2]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_mmheap_pool_add), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[c3]"></a>tos_mmheap_pool_check</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_mmheap_pool_check), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[c4]"></a>tos_mmheap_pool_rmv</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mmheap_pool_rmv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[c5]"></a>tos_mmheap_realloc</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, tlib_usr.o(.text.tos_mmheap_realloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[8b]"></a>tos_mutex_create</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_init
</UL>

<P><STRONG><a name="[88]"></a>tos_mutex_destroy</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mutex_destroy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_deinit
</UL>

<P><STRONG><a name="[84]"></a>tos_mutex_pend</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mutex_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_lock
</UL>

<P><STRONG><a name="[c6]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, tlib_usr.o(.text.tos_mutex_pend_timed), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[8e]"></a>tos_mutex_post</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_mutex_post
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_unlock
</UL>

<P><STRONG><a name="[a2]"></a>tos_sem_create</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tos_sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[c7]"></a>tos_sem_create_max</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, tlib_usr.o(.text.tos_sem_create_max), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[c8]"></a>tos_sem_destroy</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_sem_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
</UL>

<P><STRONG><a name="[9c]"></a>tos_sem_pend</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, tlib_usr.o(.text.tos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_getchar
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1
</UL>

<P><STRONG><a name="[3a]"></a>tos_sem_post</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_sem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_input_byte
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_post
</UL>

<P><STRONG><a name="[c9]"></a>tos_sem_post_all</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_sem_post_all), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[ca]"></a>tos_shell_cmd_set_regiser</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_shell.o(.text.tos_shell_cmd_set_regiser), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_set_regiser
</UL>

<P><STRONG><a name="[cb]"></a>tos_shell_cmd_set_unregiser</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_shell.o(.text.tos_shell_cmd_set_unregiser), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_set_unregiser
</UL>

<P><STRONG><a name="[cc]"></a>tos_shell_deinit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tos_shell.o(.text.tos_shell_deinit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[a4]"></a>tos_shell_init</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, tos_shell.o(.text.tos_shell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tos_shell_init &rArr; tos_task_create
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[8f]"></a>tos_shell_input_byte</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_shell.o(.text.tos_shell_input_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_shell_input_byte &rArr; tos_chr_fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_hook
</UL>

<P><STRONG><a name="[35]"></a>tos_shell_printf</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, tos_shell.o(.text.tos_shell_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_do_process
</UL>

<P><STRONG><a name="[32]"></a>tos_shell_printfln</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tos_shell.o(.text.tos_shell_printfln))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tos_shell_printfln &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_puts
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[ce]"></a>tos_task_create</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tlib_usr.o(.text.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tos_task_create
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[a3]"></a>tos_task_create_dyn</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, tlib_usr.o(.text.tos_task_create_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_task_create_dyn
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[d1]"></a>tos_task_create_dyn_k</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, tlib_usr.o(.text.tos_task_create_dyn_k), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[d2]"></a>tos_task_create_k</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, tlib_usr.o(.text.tos_task_create_k), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[d3]"></a>tos_task_curr_task_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tlib_usr.o(.text.tos_task_curr_task_get), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[a7]"></a>tos_task_delay</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_task_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_2
</UL>

<P><STRONG><a name="[d4]"></a>tos_task_delay_abort</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_delay_abort), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[a6]"></a>tos_task_destroy</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_deinit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[d5]"></a>tos_task_destroy_dyn</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_destroy_dyn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[d6]"></a>tos_task_destroy_dyn_k</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_destroy_dyn_k), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[d7]"></a>tos_task_destroy_k</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_destroy_k), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy_k
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[d8]"></a>tos_task_prio_change</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_task_prio_change), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[d9]"></a>tos_task_resume</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_resume), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[da]"></a>tos_task_stack_draught_depth</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlib_usr.o(.text.tos_task_stack_draught_depth), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[db]"></a>tos_task_suspend</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_suspend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[3b]"></a>tos_task_walkthru</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tlib_usr.o(.text.tos_task_walkthru))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_task_walkthru
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>

<P><STRONG><a name="[dc]"></a>tos_task_yield</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tlib_usr.o(.text.tos_task_yield), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[6]"></a>write_flash</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, app_entry.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = write_flash &rArr; tos_io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_io_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.test)
</UL>
<P><STRONG><a name="[a9]"></a>syscall</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tlib_s.o(RO))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_k
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_io_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_io_control
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_stack_draught_depth
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn_k
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_k
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_k
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_pool_create
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmblk_alloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post_keep
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_full
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_is_empty
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_flush
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy_dyn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create_dyn
</UL>

<P><STRONG><a name="[34]"></a>tool_goto_adrs_asm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tlib_s.o(RO))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_goto
</UL>

<P><STRONG><a name="[dd]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ef]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f0]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2f]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_walkthru
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_1
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_write_bt
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_bt
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_set
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_find
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_kv_del
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_goto
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_chk_func
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_chk_adrs
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_1
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_u8_disp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_handle_incomplete_gc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[df]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f1]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[f2]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[f3]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[cf]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printfln
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printf
</UL>

<P><STRONG><a name="[1e]"></a>app_entry</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, app_entry.o(.ARM.__at_0x0803f000), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = app_entry &rArr; tos_task_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_k
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[33]"></a>parse_argv_address</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, app_entry.o(.text.parse_argv_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parse_argv_address
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_write_bt
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_bt
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_goto
</UL>

<P><STRONG><a name="[3c]"></a>parse_argv_byte</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, app_entry.o(.text.parse_argv_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parse_argv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_write_bt
</UL>

<P><STRONG><a name="[90]"></a>shell_cmd_do_process</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, tos_shell.o(.text.shell_cmd_do_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = shell_cmd_do_process &rArr; tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_find
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_process
</UL>

<P><STRONG><a name="[96]"></a>shell_cmd_process</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, tos_shell.o(.text.shell_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = shell_cmd_process &rArr; shell_cmd_do_process &rArr; tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_do_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parser
</UL>

<P><STRONG><a name="[9b]"></a>shell_getchar</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tos_shell.o(.text.shell_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = shell_getchar &rArr; tos_sem_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>

<P><STRONG><a name="[d]"></a>shell_parser</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tos_shell.o(.text.shell_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = shell_parser &rArr; shell_cmd_process &rArr; shell_cmd_do_process &rArr; tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_shell.o(.text.tos_shell_init)
</UL>
<P><STRONG><a name="[9e]"></a>shell_prompt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_shell.o(.text.shell_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shell_prompt &rArr; tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parser
</UL>

<P><STRONG><a name="[a0]"></a>shell_putchar</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tos_shell.o(.text.shell_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>

<P><STRONG><a name="[d0]"></a>shell_puts</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tos_shell.o(.text.shell_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printfln
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printf
</UL>

<P><STRONG><a name="[9f]"></a>shell_readline</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tos_shell.o(.text.shell_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = shell_readline &rArr; cmd_help &rArr; tos_shell_printf &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printf
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_putchar
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parser
</UL>

<P><STRONG><a name="[12]"></a>cmd_free</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, tos_shell_commands.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = cmd_free &rArr; tos_shell_printfln &rArr; shell_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_check
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_shell_printfln
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_shell_commands.o(.rodata.builtin_shell_cmds)
</UL>
<P><STRONG><a name="[11]"></a>cmd_ps</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, tos_shell_commands.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = cmd_ps &rArr; tos_task_walkthru
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_shell_commands.o(.rodata.builtin_shell_cmds)
</UL>
<P><STRONG><a name="[95]"></a>tos_slist_add_head</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_shell_commands.o(.text.tos_slist_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_slist_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_set_regiser
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_init
</UL>

<P><STRONG><a name="[98]"></a>tos_slist_contains</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, tos_shell_commands.o(.text.tos_slist_contains), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_set_unregiser
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_set_regiser
</UL>

<P><STRONG><a name="[9a]"></a>tos_slist_del</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tos_shell_commands.o(.text.tos_slist_del), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_set_unregiser
</UL>

<P><STRONG><a name="[94]"></a>tos_slist_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_shell_commands.o(.text.tos_slist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_init
</UL>

<P><STRONG><a name="[5c]"></a>kv_blk_flags_add</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_flags_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_flags_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_inuse
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_hanging
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_dirty
</UL>

<P><STRONG><a name="[48]"></a>kv_blk_flags_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tos_kv.o(.text.kv_blk_flags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kv_blk_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_inuse
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_hanging
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_dirty
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_bad
</UL>

<P><STRONG><a name="[53]"></a>kv_blk_flags_rmv</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_flags_rmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_flags_rmv
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_inuse
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_hanging
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_fresh
</UL>

<P><STRONG><a name="[5a]"></a>kv_blk_flags_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_fresh
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_bad
</UL>

<P><STRONG><a name="[3e]"></a>kv_blk_format</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = kv_blk_format &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_blk_erase
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_handle_incomplete_gc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[43]"></a>kv_blk_freesz_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tos_kv.o(.text.kv_blk_freesz_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kv_blk_freesz_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_gc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_suitable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_inuse
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_full
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_reduce
</UL>

<P><STRONG><a name="[42]"></a>kv_blk_freesz_reduce</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_blk_freesz_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = kv_blk_freesz_reduce &rArr; kv_blk_freesz_set
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_set
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_gc
</UL>

<P><STRONG><a name="[44]"></a>kv_blk_freesz_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_freesz_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_freesz_set
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_fresh
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_reduce
</UL>

<P><STRONG><a name="[45]"></a>kv_blk_hdr_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_hdr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kv_blk_hdr_read &rArr; kv_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_walkthru
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
</UL>

<P><STRONG><a name="[47]"></a>kv_blk_is_bad</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_is_bad))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_is_bad &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find_new_copy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
</UL>

<P><STRONG><a name="[49]"></a>kv_blk_is_dirty</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_is_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_is_dirty &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_gc
</UL>

<P><STRONG><a name="[4a]"></a>kv_blk_is_fresh</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_is_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_is_fresh &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_workspace_locate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find_new_copy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_fresh
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_fresh
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_next_fresh
</UL>

<P><STRONG><a name="[4b]"></a>kv_blk_is_full</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_is_full &rArr; kv_blk_freesz_get
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[4c]"></a>kv_blk_is_hanging</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_is_hanging))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_is_hanging &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_blk_index_rebuild
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_hanging
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_hanging
</UL>

<P><STRONG><a name="[4d]"></a>kv_blk_is_inuse</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_is_inuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_blk_is_inuse &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_workspace_locate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_inuse
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_inuse
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_inuse
</UL>

<P><STRONG><a name="[4e]"></a>kv_blk_mark_gc_done</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_mark_gc_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = kv_blk_mark_gc_done &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[4f]"></a>kv_blk_mark_gc_dst</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_mark_gc_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = kv_blk_mark_gc_dst &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[50]"></a>kv_blk_mark_gc_src</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_mark_gc_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = kv_blk_mark_gc_src &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[51]"></a>kv_blk_next_fresh</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_next_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_blk_next_fresh &rArr; kv_blk_is_fresh &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_gc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_suitable
</UL>

<P><STRONG><a name="[52]"></a>kv_blk_reset_fresh</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_reset_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_reset_fresh &rArr; kv_blk_is_fresh &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_rmv
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[54]"></a>kv_blk_reset_hanging</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_reset_hanging))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_reset_hanging &rArr; kv_blk_is_hanging &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_hanging
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_rmv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_blk_index_rebuild
</UL>

<P><STRONG><a name="[55]"></a>kv_blk_reset_inuse</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_reset_inuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_reset_inuse &rArr; kv_blk_is_inuse &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_inuse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_rmv
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[56]"></a>kv_blk_search_inuse</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_blk_search_inuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = kv_blk_search_inuse &rArr; kv_blk_is_inuse &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_inuse
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_get
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_suitable
</UL>

<P><STRONG><a name="[57]"></a>kv_blk_search_suitable</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_search_suitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = kv_blk_search_suitable &rArr; kv_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_gc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_inuse
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_next_fresh
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
</UL>

<P><STRONG><a name="[59]"></a>kv_blk_set_bad</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_set_bad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_set_bad &rArr; kv_blk_flags_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_handle_incomplete_gc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[5b]"></a>kv_blk_set_dirty</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_set_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_set_dirty &rArr; kv_blk_flags_add
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_add
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete_aux
</UL>

<P><STRONG><a name="[41]"></a>kv_blk_set_fresh</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_blk_set_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_blk_set_fresh &rArr; kv_blk_is_fresh &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_format
</UL>

<P><STRONG><a name="[5d]"></a>kv_blk_set_hanging</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_set_hanging))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_set_hanging &rArr; kv_blk_is_hanging &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_hanging
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_add
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
</UL>

<P><STRONG><a name="[5e]"></a>kv_blk_set_inuse</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_blk_set_inuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_blk_set_inuse &rArr; kv_blk_is_inuse &rArr; kv_blk_flags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_inuse
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_flags_add
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[5f]"></a>kv_block_walkthru</STRONG> (Thumb, 986 bytes, Stack size 128 bytes, tos_kv.o(.text.kv_block_walkthru))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = kv_block_walkthru &rArr; kv_u8_disp &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_u8_disp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_verify
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_verify
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_walkthru
</UL>

<P><STRONG><a name="[6e]"></a>kv_checksum_crc8</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_checksum_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_checksum_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_verify
</UL>

<P><STRONG><a name="[67]"></a>kv_do_gc</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_inuse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_bad
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_inuse
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_fresh
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_mark_gc_src
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_mark_gc_dst
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_mark_gc_done
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_full
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_format
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_handle_incomplete_gc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_gc
</UL>

<P><STRONG><a name="[3f]"></a>kv_flash_blk_erase</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_flash_blk_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_flash_blk_erase &rArr; kv_flash_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_format
</UL>

<P><STRONG><a name="[bd]"></a>kv_flash_ctl_init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, tos_kv.o(.text.kv_flash_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_flash_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
</UL>

<P><STRONG><a name="[69]"></a>kv_flash_erase</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kv_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_blk_erase
</UL>

<P><STRONG><a name="[46]"></a>kv_flash_read</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_hdr_read
</UL>

<P><STRONG><a name="[6a]"></a>kv_flash_write</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
</UL>

<P><STRONG><a name="[40]"></a>kv_flash_wunit_modify</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_flash_wunit_modify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_delete
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_mark_gc_src
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_mark_gc_dst
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_mark_gc_done
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_format
</UL>

<P><STRONG><a name="[58]"></a>kv_gc</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = kv_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_blk_index_rebuild
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_next_fresh
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_suitable
</UL>

<P><STRONG><a name="[6c]"></a>kv_handle_incomplete_gc</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, tos_kv.o(.text.kv_handle_incomplete_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = kv_handle_incomplete_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_bad
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_format
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
</UL>

<P><STRONG><a name="[64]"></a>kv_item_body_read</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_item_body_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = kv_item_body_read &rArr; kv_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_is_moved
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_recovery
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_gc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_fetch_new_copy
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_fetch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[65]"></a>kv_item_body_verify</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_item_body_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_item_body_verify &rArr; kv_checksum_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_checksum_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_recovery
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[6f]"></a>kv_item_delete</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_item_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = kv_item_delete &rArr; kv_item_delete_aux &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete_aux
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_recovery
</UL>

<P><STRONG><a name="[70]"></a>kv_item_delete_aux</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_item_delete_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = kv_item_delete_aux &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_delete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete
</UL>

<P><STRONG><a name="[71]"></a>kv_item_do_delete</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_item_do_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete_aux
</UL>

<P><STRONG><a name="[3]"></a>kv_item_do_fetch</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_item_do_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = kv_item_do_fetch &rArr; kv_item_body_read &rArr; kv_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_kv.o(.text.kv_item_do_find)
</UL>
<P><STRONG><a name="[4]"></a>kv_item_do_fetch_new_copy</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, tos_kv.o(.text.kv_item_do_fetch_new_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = kv_item_do_fetch_new_copy &rArr; kv_item_body_read &rArr; kv_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_kv.o(.text.kv_item_do_find_new_copy)
</UL>
<P><STRONG><a name="[73]"></a>kv_item_do_find</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_item_do_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = kv_item_do_find &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find
</UL>

<P><STRONG><a name="[74]"></a>kv_item_do_find_new_copy</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_item_do_find_new_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find_new_copy
</UL>

<P><STRONG><a name="[2]"></a>kv_item_do_gc</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, tos_kv.o(.text.kv_item_do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = kv_item_do_gc &rArr; kv_item_write &rArr; kv_item_hdr_write &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_reduce
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_kv.o(.text.kv_do_gc)
</UL>
<P><STRONG><a name="[5]"></a>kv_item_do_recovery</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_item_do_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = kv_item_do_recovery &rArr; kv_item_try_delete &rArr; kv_item_delete_aux &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_is_updated_one
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_verify
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_kv.o(.text.kv_mgr_index_build)
</UL>
<P><STRONG><a name="[78]"></a>kv_item_do_save</STRONG> (Thumb, 252 bytes, Stack size 104 bytes, tos_kv.o(.text.kv_item_do_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = kv_item_do_save &rArr; kv_item_write &rArr; kv_item_hdr_write &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_checksum_crc8
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
</UL>

<P><STRONG><a name="[7a]"></a>kv_item_find</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_item_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = kv_item_find &rArr; kv_item_do_find &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_find
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_bad
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_has_key
</UL>

<P><STRONG><a name="[7b]"></a>kv_item_find_new_copy</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_item_find_new_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = kv_item_find_new_copy &rArr; kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_find_new_copy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_bad
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_fix
</UL>

<P><STRONG><a name="[7c]"></a>kv_item_fix</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_item_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = kv_item_fix &rArr; kv_item_find_new_copy &rArr; kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_find_new_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
</UL>

<P><STRONG><a name="[62]"></a>kv_item_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = kv_item_free &rArr; tos_mmheap_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_has_key
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_fix
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[61]"></a>kv_item_hdr_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_item_hdr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kv_item_hdr_read &rArr; kv_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_try_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_is_moved
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[63]"></a>kv_item_hdr_verify</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_item_hdr_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kv_item_hdr_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[7d]"></a>kv_item_hdr_write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tos_kv.o(.text.kv_item_hdr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = kv_item_hdr_write &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_wunit_modify
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_write
</UL>

<P><STRONG><a name="[7e]"></a>kv_item_is_moved</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, tos_kv.o(.text.kv_item_is_moved))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = kv_item_is_moved &rArr; kv_item_body_read &rArr; kv_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_body_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
</UL>

<P><STRONG><a name="[76]"></a>kv_item_is_updated_one</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, tos_kv.o(.text.kv_item_is_updated_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kv_item_is_updated_one
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_recovery
</UL>

<P><STRONG><a name="[7f]"></a>kv_item_save</STRONG> (Thumb, 348 bytes, Stack size 96 bytes, tos_kv.o(.text.kv_item_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = kv_item_save &rArr; kv_item_fix &rArr; kv_item_find_new_copy &rArr; kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_is_moved
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_fix
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_inuse
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_search_suitable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_inuse
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_fresh
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_full
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_reduce
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_get
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
</UL>

<P><STRONG><a name="[77]"></a>kv_item_try_delete</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, tos_kv.o(.text.kv_item_try_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = kv_item_try_delete &rArr; kv_item_delete_aux &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete_aux
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_recovery
</UL>

<P><STRONG><a name="[80]"></a>kv_item_update</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, tos_kv.o(.text.kv_item_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = kv_item_update &rArr; kv_item_save &rArr; kv_item_fix &rArr; kv_item_find_new_copy &rArr; kv_item_do_find_new_copy &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_value_is_match
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_save
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
</UL>

<P><STRONG><a name="[81]"></a>kv_item_value_is_match</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, tos_kv.o(.text.kv_item_value_is_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kv_item_value_is_match &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
</UL>

<P><STRONG><a name="[68]"></a>kv_item_walkthru</STRONG> (Thumb, 710 bytes, Stack size 80 bytes, tos_kv.o(.text.kv_item_walkthru))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_verify
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_inuse
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_fresh
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_dirty
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_inuse
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_freesz_set
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_index_build
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_find_new_copy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_find
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>

<P><STRONG><a name="[75]"></a>kv_item_write</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tos_kv.o(.text.kv_item_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = kv_item_write &rArr; kv_item_hdr_write &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_hdr_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_save
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_do_gc
</UL>

<P><STRONG><a name="[82]"></a>kv_lock</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = kv_lock &rArr; tos_mutex_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_has_key
</UL>

<P><STRONG><a name="[6b]"></a>kv_mgr_blk_index_rebuild</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_mgr_blk_index_rebuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = kv_mgr_blk_index_rebuild &rArr; kv_mgr_index_build &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_index_build
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_reset_hanging
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_hanging
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_workspace_locate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_gc
</UL>

<P><STRONG><a name="[86]"></a>kv_mgr_ctl_build</STRONG> (Thumb, 336 bytes, Stack size 120 bytes, tos_kv.o(.text.kv_mgr_ctl_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = kv_mgr_ctl_build &rArr; kv_handle_incomplete_gc &rArr; kv_do_gc &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_index_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_handle_incomplete_gc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_hanging
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_set_bad
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_hdr_read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_format
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
</UL>

<P><STRONG><a name="[87]"></a>kv_mgr_ctl_deinit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_mgr_ctl_deinit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_deinit
</UL>

<P><STRONG><a name="[8a]"></a>kv_mgr_ctl_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_mgr_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = kv_mgr_ctl_init &rArr; tos_mmheap_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
</UL>

<P><STRONG><a name="[85]"></a>kv_mgr_index_build</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_mgr_index_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = kv_mgr_index_build &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_walkthru
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_ctl_build
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_blk_index_rebuild
</UL>

<P><STRONG><a name="[8c]"></a>kv_mgr_workspace_locate</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tos_kv.o(.text.kv_mgr_workspace_locate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = kv_mgr_workspace_locate &rArr; kv_mgr_blk_index_rebuild &rArr; kv_mgr_index_build &rArr; kv_item_walkthru &rArr; kv_item_do_delete &rArr; kv_flash_wunit_modify &rArr; kv_flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_mgr_blk_index_rebuild
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_inuse
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_blk_is_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
</UL>

<P><STRONG><a name="[bc]"></a>kv_param_verify</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, tos_kv.o(.text.kv_param_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kv_param_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_init
</UL>

<P><STRONG><a name="[66]"></a>kv_u8_disp</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, tos_kv.o(.text.kv_u8_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = kv_u8_disp &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_walkthru
</UL>

<P><STRONG><a name="[8d]"></a>kv_unlock</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_kv.o(.text.kv_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = kv_unlock &rArr; tos_mutex_post
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_get
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_del
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_kv_has_key
</UL>

<P><STRONG><a name="[e0]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
