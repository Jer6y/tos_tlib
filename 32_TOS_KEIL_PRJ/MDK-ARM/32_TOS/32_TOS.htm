<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [32_TOS\32_TOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 32_TOS\32_TOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6070001: Last Updated: Mon Sep  4 12:24:21 2023
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[207]">port_int_disable</a>
 <LI><a href="#[208]">port_int_enable</a>
 <LI><a href="#[1a5]">port_cpsr_save</a>
 <LI><a href="#[1a4]">port_cpsr_restore</a>
 <LI><a href="#[1a3]">port_clz</a>
 <LI><a href="#[f7]">port_sched_start</a>
 <LI><a href="#[54]">port_context_switch</a>
 <LI><a href="#[f5]">port_irq_context_switch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[1e4]">syscall</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3a]">AES_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32wlxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[1e]">COMP_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[1d]">DAC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[41]">DMA2_Channel5_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel6_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel7_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[44]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32wlxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[1f]">EXTI9_5_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[36]">HSEM_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32wlxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[38]">I2C3_ER_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[37]">I2C3_EV_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[30]">LPTIM1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[31]">LPTIM2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[34]">LPTIM3_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2f]">LPUART1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32wlxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32wlxx_it.o(.text.NMI_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3c]">PKA_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[3b]">RNG_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2c]">SPI2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[35]">SUBGHZSPI_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[39]">SUBGHZ_Radio_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port_s.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32wlxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32wlxx.o(.text.SystemInit) referenced from startup_stm32wle5xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_LSECSS_SSRU_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[25]">TIM16_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[26]">TIM17_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[22]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[21]">TIM1_UP_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2d]">USART1_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[2e]">USART2_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32wlxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32wle5xx.o(.text) referenced from startup_stm32wle5xx.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32wle5xx.o(.text)
 <LI><a href="#[4b]">app_entry</a> from app_entry.o(MYRO) referenced 2 times from main.o(.text.main)
 <LI><a href="#[4d]">fputc</a> from stdio.o(.text.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[4a]">knl_idle_entry</a> from tos_sys.o(.text.knl_idle_entry) referenced 2 times from tos_sys.o(.text.knl_idle_init)
 <LI><a href="#[45]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">syscall_kernel</a> from tlib.o(.text.syscall_kernel) referenced 2 times from tos_tlib.o(.text.cpu_tlib_kernel_stk_init)
 <LI><a href="#[4c]">task_exit</a> from tos_task.o(.text.task_exit) referenced 2 times from tos_task.o(.text.tos_task_create)
 <LI><a href="#[4c]">task_exit</a> from tos_task.o(.text.task_exit) referenced 2 times from tos_task.o(.text.tos_task_create_tlib)
 <LI><a href="#[4e]">test</a> from app_entry.o(MYRO) referenced 2 times from app_entry.o(MYRO)
 <LI><a href="#[4f]">test2</a> from app_entry.o(MYRO) referenced 2 times from app_entry.o(MYRO)
 <LI><a href="#[49]">tos_task_destroy_dyn</a> from tos_task.o(.text.tos_task_destroy_dyn) referenced 2 times from tos_tlib.o(.text.cpu_tlib_kernel_stk_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(.text)
</UL>
<P><STRONG><a name="[201]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[202]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[203]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[204]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[205]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[206]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SUBGHZSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SUBGHZ_Radio_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_LSECSS_SSRU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wle5xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[207]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[1a4]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[1a3]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[f7]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[54]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[f5]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; syscall_kernel_knl &rArr; syscall_task_create &rArr; tos_task_create_dyn_tlib &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_tlib_kernel_stk_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlib_init
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[20e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[20f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[210]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[69]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[c1]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5c]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32wlxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>HAL_InitTick</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32wlxx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[60]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[62]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[5d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[68]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[67]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetRTCClockSource
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRTCClockSource
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRNGClockSource
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPUARTClockSource
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2SClockSource
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetADCClockSource
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[76]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHB3Prescaler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_SHDHPRE
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_PPRE2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_PPRE1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HPRE
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[87]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[85]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsEnabledRangeSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRangeAfterStandby
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsEnabledDiv2
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1332 bytes, Stack size 32 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Disable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_Enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_Disable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_IsReady
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Disable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Disable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_EnableTcxo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_DisableTcxo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Disable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsEnabledBkUpAccess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[61]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_EnableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_EnableFifoMode &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_MspInit</STRONG> (Thumb, 204 bytes, Stack size 88 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>MX_GPIO_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MX_GPIO_Init &rArr; LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SystemClock_Config</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32wlxx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[af]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ad]"></a>UART_SetConfig</STRONG> (Thumb, 656 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockSource
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, stm32wlxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wle5xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>cpu_context_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text.cpu_context_switch))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[f2]"></a>cpu_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[f4]"></a>cpu_irq_context_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text.cpu_irq_context_switch))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[f6]"></a>cpu_sched_start</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_sched_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_sched_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[f3]"></a>cpu_systick_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[1d2]"></a>cpu_task_stk_init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, tos_cpu.o(.text.cpu_task_stk_init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[53]"></a>cpu_tlib_kernel_stk_init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, tos_tlib.o(.text.cpu_tlib_kernel_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_tlib_kernel_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[101]"></a>find_set_pid</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tos_tlib.o(.text.find_set_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = find_set_pid &rArr; find_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[4d]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stdio.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[103]"></a>free_pid</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_tlib.o(.text.free_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = free_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[106]"></a>knl_idle_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tos_sys.o(.text.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[13f]"></a>knl_is_idle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[108]"></a>knl_is_inirq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[109]"></a>knl_is_sched_locked</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[10b]"></a>knl_is_self</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[100]"></a>knl_sched</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tos_sys.o(.text.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = knl_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[111]"></a>mmheap_init_with_pool</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[11a]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(.text.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[116]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(.text.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_new_owner_mark
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>

<P><STRONG><a name="[1c9]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_highest_pending_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[11d]"></a>pend_is_nopending</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_is_nopending))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[121]"></a>pend_list_adjust</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_pend.o(.text.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[123]"></a>pend_list_remove</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tos_pend.o(.text.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_reset_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[125]"></a>pend_object_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_object_deinit))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
</UL>

<P><STRONG><a name="[127]"></a>pend_object_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_object_init))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>

<P><STRONG><a name="[1ab]"></a>pend_state2errno</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_state2errno))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>

<P><STRONG><a name="[128]"></a>pend_task_block</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_pend.o(.text.pend_task_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>

<P><STRONG><a name="[fe]"></a>pend_task_wakeup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tos_pend.o(.text.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_suspended
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[130]"></a>pend_wakeup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[11b]"></a>pend_wakeup_all</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_pend.o(.text.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>

<P><STRONG><a name="[131]"></a>pend_wakeup_one</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(.text.pend_wakeup_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_one &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
</UL>

<P><STRONG><a name="[14c]"></a>pid_to_tcb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_tlib.o(.text.pid_to_tcb))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn_tlib
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_suspend
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_resume
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_prio_chg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_cancle_delay
</UL>

<P><STRONG><a name="[f9]"></a>port_systick_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port_c.o(.text.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[f8]"></a>port_systick_priority_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port_c.o(.text.port_systick_priority_set))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[12f]"></a>readyqueue_add</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[132]"></a>readyqueue_add_head</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
</UL>

<P><STRONG><a name="[133]"></a>readyqueue_add_tail</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[138]"></a>readyqueue_first_task_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_first_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readyqueue_first_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[10a]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[139]"></a>readyqueue_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[143]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_is_prio_onlyone))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[13b]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_move_head_to_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_move_head_to_tail &rArr; tos_list_move_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_move_tail
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[129]"></a>readyqueue_remove</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_remove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[142]"></a>robin_sched</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_robin.o(.text.robin_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = robin_sched &rArr; readyqueue_move_head_to_tail &rArr; tos_list_move_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_is_prio_onlyone
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[1ac]"></a>soft_timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(.text.soft_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[146]"></a>soft_timer_update</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, tos_timer.o(.text.soft_timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = soft_timer_update &rArr; timer_place
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[48]"></a>syscall_kernel</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, tlib.o(.text.syscall_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = syscall_kernel &rArr; syscall_task_create &rArr; tos_task_create_dyn_tlib &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_yield
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_remove
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_getpid
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_suspend
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_post_all
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_post
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_pend
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_destory
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_create_max
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sched_unlock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sched_lock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_resume
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_prio_chg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_post
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_pend_timed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_pend
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_destory
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_rmv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_realloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_pool_chk
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_free
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_aloc_align
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_aloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_pend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_destroy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_delay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_cancle_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_tlib.o(.text.cpu_tlib_kernel_stk_init)
</UL>
<P><STRONG><a name="[52]"></a>syscall_kernel_knl</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, tlib.o(.text.syscall_kernel_knl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = syscall_kernel_knl &rArr; syscall_task_create &rArr; tos_task_create_dyn_tlib &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_yield
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_remove
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_getpid
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_suspend
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_post_all
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_post
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_pend
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_destory
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_create_max
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sched_unlock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sched_lock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_resume
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_prio_chg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_post
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_pend_timed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_pend
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_destory
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_rmv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_realloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_pool_chk
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_free
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_aloc_align
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_aloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_pend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_destroy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_delay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_cancle_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[105]"></a>task_free_all</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_task.o(.text.task_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>

<P><STRONG><a name="[12a]"></a>tick_list_add</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_tick.o(.text.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_sleeping
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
</UL>

<P><STRONG><a name="[12d]"></a>tick_list_remove</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_tick.o(.text.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_reset_sleeping
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[19e]"></a>tick_update</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tos_tick.o(.text.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[1a2]"></a>tlib_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tos_tlib.o(.text.tlib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tlib_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[104]"></a>tos_cpu_clz</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text.tos_cpu_clz))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[ff]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text.tos_cpu_cpsr_restore))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlib_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pid
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_set_pid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[fc]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text.tos_cpu_cpsr_save))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlib_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pid
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_set_pid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[151]"></a>tos_event_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tos_event.o(.text.tos_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_event_create
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_create
</UL>

<P><STRONG><a name="[153]"></a>tos_event_destroy</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tos_event.o(.text.tos_event_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_event_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_destroy
</UL>

<P><STRONG><a name="[155]"></a>tos_event_pend</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, tos_event.o(.text.tos_event_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_is_match
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_pend
</UL>

<P><STRONG><a name="[157]"></a>tos_event_post</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_event.o(.text.tos_event_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_event_post &rArr; event_do_post &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_event_post
</UL>

<P><STRONG><a name="[10c]"></a>tos_knl_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlib_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>tos_knl_irq_enter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c5]"></a>tos_knl_irq_leave</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c2]"></a>tos_knl_is_running</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sys.o(.text.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[147]"></a>tos_knl_sched_lock</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sched_lock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
</UL>

<P><STRONG><a name="[14a]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sched_unlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
</UL>

<P><STRONG><a name="[10f]"></a>tos_knl_start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_start &rArr; cpu_sched_start
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>tos_mmheap_aligned_alloc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tos_mmheap.o(.text.tos_mmheap_aligned_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_aligned_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_aloc_align
</UL>

<P><STRONG><a name="[173]"></a>tos_mmheap_alloc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_mmheap.o(.text.tos_mmheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_aloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
</UL>

<P><STRONG><a name="[1ba]"></a>tos_mmheap_calloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(.text.tos_mmheap_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
</UL>

<P><STRONG><a name="[175]"></a>tos_mmheap_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_mmheap.o(.text.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_from_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>

<P><STRONG><a name="[112]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tos_mmheap.o(.text.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_record
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_full
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_down
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[176]"></a>tos_mmheap_pool_check</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tos_mmheap.o(.text.tos_mmheap_pool_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tos_mmheap_pool_check &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_last
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_pool_chk
</UL>

<P><STRONG><a name="[178]"></a>tos_mmheap_pool_rmv</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tos_mmheap.o(.text.tos_mmheap_pool_rmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_rmv &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_unrecord
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_rmv
</UL>

<P><STRONG><a name="[177]"></a>tos_mmheap_realloc</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, tos_mmheap.o(.text.tos_mmheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_from_ptr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mmheap_realloc
</UL>

<P><STRONG><a name="[179]"></a>tos_mutex_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_mutex.o(.text.tos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_create
</UL>

<P><STRONG><a name="[17a]"></a>tos_mutex_destroy</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_mutex.o(.text.tos_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_mutex_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_destory
</UL>

<P><STRONG><a name="[17b]"></a>tos_mutex_pend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mutex.o(.text.tos_mutex_pend))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_pend
</UL>

<P><STRONG><a name="[17c]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, tos_mutex.o(.text.tos_mutex_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_pend_timed
</UL>

<P><STRONG><a name="[17d]"></a>tos_mutex_post</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tos_mutex.o(.text.tos_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_new_owner_mark
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_mutex_post
</UL>

<P><STRONG><a name="[17f]"></a>tos_sem_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sem.o(.text.tos_sem_create))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_create
</UL>

<P><STRONG><a name="[180]"></a>tos_sem_create_max</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_sem.o(.text.tos_sem_create_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_sem_create_max
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_create_max
</UL>

<P><STRONG><a name="[181]"></a>tos_sem_destroy</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tos_sem.o(.text.tos_sem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_destory
</UL>

<P><STRONG><a name="[182]"></a>tos_sem_pend</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tos_sem.o(.text.tos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_pend
</UL>

<P><STRONG><a name="[183]"></a>tos_sem_post</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sem.o(.text.tos_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_post
</UL>

<P><STRONG><a name="[184]"></a>tos_sem_post_all</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sem.o(.text.tos_sem_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_sem_post_all &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_sem_post_all
</UL>

<P><STRONG><a name="[107]"></a>tos_task_create</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, tos_task.o(.text.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_set_pid
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_ready
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[10e]"></a>tos_task_create_dyn_tlib</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, tos_task.o(.text.tos_task_create_dyn_tlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tos_task_create_dyn_tlib &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_dynamic
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_create
</UL>

<P><STRONG><a name="[1d5]"></a>tos_task_create_tlib</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, tos_task.o(.text.tos_task_create_tlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_create_tlib &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_set_pid
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_ready
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
</UL>

<P><STRONG><a name="[14f]"></a>tos_task_delay</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tos_task.o(.text.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_delay
</UL>

<P><STRONG><a name="[14d]"></a>tos_task_delay_abort</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_delay_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_delay_abort &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_suspended
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_cancle_delay
</UL>

<P><STRONG><a name="[191]"></a>tos_task_destroy</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[49]"></a>tos_task_destroy_dyn</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_destroy_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy_dyn &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_dynamic
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn_tlib
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_tlib.o(.text.cpu_tlib_kernel_stk_init)
</UL>
<P><STRONG><a name="[186]"></a>tos_task_destroy_dyn_tlib</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tos_task.o(.text.tos_task_destroy_dyn_tlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy_dyn_tlib &rArr; tos_task_destroy_dyn &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_to_tcb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_task_remove
</UL>

<P><STRONG><a name="[117]"></a>tos_task_prio_change</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, tos_task.o(.text.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_prio_chg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_new_owner_mark
</UL>

<P><STRONG><a name="[17e]"></a>tos_task_resume</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_task_resume &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_reset_suspended
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_suspended
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_resume
</UL>

<P><STRONG><a name="[185]"></a>tos_task_suspend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_suspend &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_suspended
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_suspend
</UL>

<P><STRONG><a name="[187]"></a>tos_task_yield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_yield
</UL>

<P><STRONG><a name="[c4]"></a>tos_tick_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tos_tick.o(.text.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[213]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[10d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test (via Veneer)
</UL>

<P><STRONG><a name="[214]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[215]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[216]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4e]"></a>test</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_entry.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = test &rArr; tos_sem_pend_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_t
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend_t
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(MYRO)
</UL>
<P><STRONG><a name="[4f]"></a>test2</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_entry.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = test2 &rArr; tos_sem_pend_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_t
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend_t
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(MYRO)
</UL>
<P><STRONG><a name="[4b]"></a>app_entry</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, app_entry.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = app_entry &rArr; tos_task_create_dyn_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_t
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_t
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_t
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend_t
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_t
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[1e4]"></a>syscall</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tlib_s.o(MYRO))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_t
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_t
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_t
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend_t
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_t
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pid
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield_t
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend_t
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume_t
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change_t
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn_t
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort_t
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all_t
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy_t
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max_t
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post_t
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed_t
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_t
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy_t
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create_t
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc_t
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv_t
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check_t
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add_t
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free_t
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc_t
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc_t
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock_t
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock_t
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running_t
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post_t
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend_t
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy_t
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create_t
</UL>

<P><STRONG><a name="[1e2]"></a>tos_task_create_dyn_t</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, tlib_usr.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tos_task_create_dyn_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1e5]"></a>tos_task_destroy_dyn_t</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1de]"></a>get_pid</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tlib_usr.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = get_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1e3]"></a>tos_task_delay_t</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlib_usr.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_task_delay_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1e6]"></a>tos_task_delay_abort_t</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1e7]"></a>tos_task_suspend_t</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1e8]"></a>tos_knl_is_running_t</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1e9]"></a>tos_knl_sched_lock_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1ea]"></a>tos_knl_sched_unlock_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1eb]"></a>tos_task_resume_t</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1ec]"></a>tos_task_prio_change_t</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1ed]"></a>tos_task_yield_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1ee]"></a>tos_mmheap_pool_add_t</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1ef]"></a>tos_mmheap_pool_rmv_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f0]"></a>tos_mmheap_alloc_t</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f1]"></a>tos_mmheap_aligned_alloc_t</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f2]"></a>tos_mmheap_realloc_t</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f3]"></a>tos_mmheap_free_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f4]"></a>tos_mmheap_pool_check_t</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f5]"></a>tos_mutex_create_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f6]"></a>tos_mutex_destroy_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f7]"></a>tos_mutex_pend_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f8]"></a>tos_mutex_pend_timed_t</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1f9]"></a>tos_mutex_post_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1e1]"></a>tos_sem_create_t</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tlib_usr.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_sem_create_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1fa]"></a>tos_sem_create_max_t</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1fb]"></a>tos_sem_destroy_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1df]"></a>tos_sem_pend_t</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, tlib_usr.o(MYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_sem_pend_t
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1e0]"></a>tos_sem_post_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1fc]"></a>tos_sem_post_all_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1fd]"></a>tos_event_create_t</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1fe]"></a>tos_event_destroy_t</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[1ff]"></a>tos_event_pend_t</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>

<P><STRONG><a name="[200]"></a>tos_event_post_t</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlib_usr.o(MYRO), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b9]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gpio.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b3]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, usart.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b5]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, usart.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b2]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, usart.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[c8]"></a>LL_RCC_GetLPUARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.LL_RCC_GetLPUARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c7]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a8]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32wlxx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>

<P><STRONG><a name="[97]"></a>LL_PWR_IsEnabledBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_PWR_IsEnabledBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[bd]"></a>LL_RCC_GetAHB3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_GetAHB3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[86]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[88]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[8a]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[82]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[a4]"></a>LL_RCC_HSE_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a5]"></a>LL_RCC_HSE_DisableTcxo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSE_DisableTcxo))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9d]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a3]"></a>LL_RCC_HSE_EnableTcxo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSE_EnableTcxo))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[8f]"></a>LL_RCC_HSE_IsEnabledDiv2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSE_IsEnabledDiv2))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[7f]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[a2]"></a>LL_RCC_HSI_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9e]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[84]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[94]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[78]"></a>LL_RCC_IsActiveFlag_HPRE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_HPRE))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7c]"></a>LL_RCC_IsActiveFlag_PPRE1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_PPRE1))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7e]"></a>LL_RCC_IsActiveFlag_PPRE2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_PPRE2))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7a]"></a>LL_RCC_IsActiveFlag_SHDHPRE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_SHDHPRE))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[98]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[99]"></a>LL_RCC_LSI_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_LSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a0]"></a>LL_RCC_LSI_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_LSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9a]"></a>LL_RCC_LSI_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_LSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9f]"></a>LL_RCC_MSI_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9b]"></a>LL_RCC_MSI_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[8d]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[8e]"></a>LL_RCC_MSI_GetRangeAfterStandby</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_GetRangeAfterStandby))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[8c]"></a>LL_RCC_MSI_IsEnabledRangeSelect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_IsEnabledRangeSelect))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[80]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[96]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9c]"></a>LL_RCC_PLL_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a1]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[91]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[8b]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[90]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[92]"></a>LL_RCC_PLL_GetR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_GetR))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[83]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[79]"></a>LL_RCC_SetAHB3Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_SetAHB3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[77]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7b]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7d]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[81]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[bc]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wlxx_hal_rcc.o(.text.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[95]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32wlxx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHB3Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[6b]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6a]"></a>LL_RCC_GetRTCClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_GetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6d]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6c]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[75]"></a>LL_RCC_SetADCClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetADCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[72]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetI2CClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[73]"></a>LL_RCC_SetI2SClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetI2SClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[71]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[70]"></a>LL_RCC_SetLPUARTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetLPUARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[74]"></a>LL_RCC_SetRNGClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetRNGClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6e]"></a>LL_RCC_SetRTCClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[6f]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[64]"></a>NVIC_EncodePriority</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a6]"></a>SysTick_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32wlxx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[63]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[65]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[66]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[14b]"></a>syscall_cancle_delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlib.o(.text.syscall_cancle_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = syscall_cancle_delay &rArr; tos_task_delay_abort &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_to_tcb
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[14e]"></a>syscall_delay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tlib.o(.text.syscall_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = syscall_delay &rArr; tos_task_delay &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[150]"></a>syscall_event_create</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlib.o(.text.syscall_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscall_event_create &rArr; tos_event_create
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[152]"></a>syscall_event_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_event_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = syscall_event_destroy &rArr; tos_event_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[154]"></a>syscall_event_pend</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tlib.o(.text.syscall_event_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = syscall_event_pend &rArr; tos_event_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[156]"></a>syscall_event_post</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlib.o(.text.syscall_event_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = syscall_event_post &rArr; tos_event_post &rArr; event_do_post &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[161]"></a>syscall_mmheap_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mmheap_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = syscall_mmheap_add &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[163]"></a>syscall_mmheap_aloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlib.o(.text.syscall_mmheap_aloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = syscall_mmheap_aloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[164]"></a>syscall_mmheap_aloc_align</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tlib.o(.text.syscall_mmheap_aloc_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = syscall_mmheap_aloc_align &rArr; tos_mmheap_aligned_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[166]"></a>syscall_mmheap_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = syscall_mmheap_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[167]"></a>syscall_mmheap_pool_chk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mmheap_pool_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = syscall_mmheap_pool_chk &rArr; tos_mmheap_pool_check &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[165]"></a>syscall_mmheap_realloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tlib.o(.text.syscall_mmheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = syscall_mmheap_realloc &rArr; tos_mmheap_realloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[162]"></a>syscall_mmheap_rmv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mmheap_rmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = syscall_mmheap_rmv &rArr; tos_mmheap_pool_rmv &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[168]"></a>syscall_mutex_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscall_mutex_create &rArr; tos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[169]"></a>syscall_mutex_destory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mutex_destory))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = syscall_mutex_destory &rArr; tos_mutex_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[16a]"></a>syscall_mutex_pend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mutex_pend))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[16b]"></a>syscall_mutex_pend_timed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mutex_pend_timed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = syscall_mutex_pend_timed &rArr; tos_mutex_pend_timed &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[16c]"></a>syscall_mutex_post</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_mutex_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = syscall_mutex_post &rArr; tos_mutex_post &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[15f]"></a>syscall_prio_chg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tlib.o(.text.syscall_prio_chg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = syscall_prio_chg &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_to_tcb
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[15e]"></a>syscall_resume</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tlib.o(.text.syscall_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = syscall_resume &rArr; tos_task_resume &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_to_tcb
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[15c]"></a>syscall_sched_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = syscall_sched_lock &rArr; tos_knl_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[15d]"></a>syscall_sched_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = syscall_sched_unlock &rArr; tos_knl_sched_unlock &rArr; knl_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[16d]"></a>syscall_sem_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sem_create))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[16e]"></a>syscall_sem_create_max</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sem_create_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscall_sem_create_max &rArr; tos_sem_create_max
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[16f]"></a>syscall_sem_destory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sem_destory))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = syscall_sem_destory &rArr; tos_sem_destroy &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[170]"></a>syscall_sem_pend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = syscall_sem_pend &rArr; tos_sem_pend &rArr; pend_task_block &rArr; tick_list_add &rArr; tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[171]"></a>syscall_sem_post</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = syscall_sem_post &rArr; tos_sem_post &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[172]"></a>syscall_sem_post_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_sem_post_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = syscall_sem_post_all &rArr; tos_sem_post_all &rArr; sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[15b]"></a>syscall_suspend</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tlib.o(.text.syscall_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = syscall_suspend &rArr; tos_task_suspend &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_to_tcb
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[159]"></a>syscall_task_create</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, tlib.o(.text.syscall_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = syscall_task_create &rArr; tos_task_create_dyn_tlib &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[158]"></a>syscall_task_getpid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tlib.o(.text.syscall_task_getpid))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[15a]"></a>syscall_task_remove</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlib.o(.text.syscall_task_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = syscall_task_remove &rArr; tos_task_destroy_dyn_tlib &rArr; tos_task_destroy_dyn &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn_tlib
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[160]"></a>syscall_yield</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlib.o(.text.syscall_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = syscall_yield &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel_knl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_kernel
</UL>

<P><STRONG><a name="[fa]"></a>event_do_post</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tos_event.o(.text.event_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = event_do_post &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_is_match
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_post
</UL>

<P><STRONG><a name="[fd]"></a>event_is_match</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_event.o(.text.event_is_match))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>

<P><STRONG><a name="[1a8]"></a>knl_object_alloc_is_static</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_event.o(.text.knl_object_alloc_is_static))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
</UL>

<P><STRONG><a name="[1aa]"></a>knl_object_alloc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_event.o(.text.knl_object_alloc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
</UL>

<P><STRONG><a name="[1a7]"></a>knl_object_alloc_set_static</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_event.o(.text.knl_object_alloc_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>

<P><STRONG><a name="[1a9]"></a>knl_object_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_event.o(.text.knl_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
</UL>

<P><STRONG><a name="[1a6]"></a>knl_object_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_event.o(.text.knl_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_create
</UL>

<P><STRONG><a name="[fb]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_event.o(.text.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_pend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_event_destroy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_do_post
</UL>

<P><STRONG><a name="[c9]"></a>__ffs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(.text.__ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __ffs &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[cb]"></a>__fls</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_mmheap.o(.text.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[ce]"></a>adjust_request_size</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_mmheap.o(.text.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_up
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[1be]"></a>align_down</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(.text.align_down))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[1b9]"></a>align_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.align_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[cf]"></a>align_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.align_up))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>

<P><STRONG><a name="[d0]"></a>blk_absorb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[d3]"></a>blk_can_split</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_can_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blk_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[1bb]"></a>blk_from_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_from_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[d4]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[e4]"></a>blk_is_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_is_free))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[d7]"></a>blk_is_last</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_is_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blk_is_last
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
</UL>

<P><STRONG><a name="[e7]"></a>blk_is_prev_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_is_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[d2]"></a>blk_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[d9]"></a>blk_locate_free</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = blk_locate_free &rArr; mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[dd]"></a>blk_mark_as_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[e0]"></a>blk_mark_as_used</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_mark_as_used &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[e3]"></a>blk_merge_next</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
</UL>

<P><STRONG><a name="[e6]"></a>blk_merge_prev</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prev
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_prev_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[d8]"></a>blk_next</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[eb]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[e8]"></a>blk_prev</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_prev))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[e5]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[db]"></a>blk_search_suitable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tos_mmheap.o(.text.blk_search_suitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = blk_search_suitable &rArr; __ffs &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[df]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[de]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[e1]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[ee]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[e2]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[d1]"></a>blk_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_last
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[ed]"></a>blk_split</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_mmheap.o(.text.blk_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[e9]"></a>blk_to_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[ec]"></a>blk_trim_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_trim_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[ef]"></a>blk_trim_free_leading</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_trim_free_leading))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_trim_free_leading &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[f0]"></a>blk_trim_used</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_trim_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = blk_trim_used &rArr; blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>

<P><STRONG><a name="[ca]"></a>generic_fls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_mmheap.o(.text.generic_fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[d6]"></a>insert_free_block</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tos_mmheap.o(.text.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[d5]"></a>mapping_insert</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[da]"></a>mapping_search</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mapping_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[110]"></a>mmheap_ctl_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mmheap_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmheap_ctl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[1bd]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_mmheap.o(.text.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[1bc]"></a>mmheap_pool_is_full</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_mmheap.o(.text.mmheap_pool_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[1bf]"></a>mmheap_pool_record</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_mmheap.o(.text.mmheap_pool_record))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[1c0]"></a>mmheap_pool_unrecord</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tos_mmheap.o(.text.mmheap_pool_unrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mmheap_pool_unrecord
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
</UL>

<P><STRONG><a name="[ea]"></a>offset_to_blk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.offset_to_blk))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[dc]"></a>remove_free_block</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tos_mmheap.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[1ad]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mutex.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
</UL>

<P><STRONG><a name="[1b4]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[1c6]"></a>knl_object_alloc_is_static</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mutex.o(.text.knl_object_alloc_is_static))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[1c8]"></a>knl_object_alloc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text.knl_object_alloc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[1c4]"></a>knl_object_alloc_set_static</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text.knl_object_alloc_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[1c7]"></a>knl_object_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text.knl_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[1c3]"></a>knl_object_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mutex.o(.text.knl_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[1c5]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_mutex.o(.text.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[113]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_mutex.o(.text.mutex_fresh_owner_mark))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_new_owner_mark
</UL>

<P><STRONG><a name="[115]"></a>mutex_new_owner_mark</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mutex.o(.text.mutex_new_owner_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mutex_new_owner_mark &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[118]"></a>mutex_old_owner_release</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tos_mutex.o(.text.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[114]"></a>tos_list_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text.tos_list_add))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
</UL>

<P><STRONG><a name="[119]"></a>tos_list_del</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mutex.o(.text.tos_list_del))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[1c2]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[1b1]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[1b5]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[11e]"></a>pend_list_add</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_pend.o(.text.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[12b]"></a>task_state_is_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[12c]"></a>task_state_is_sleeping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_is_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[12e]"></a>task_state_is_suspended</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[124]"></a>task_state_reset_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_reset_pending))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>

<P><STRONG><a name="[120]"></a>task_state_set_pend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_set_pend))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>

<P><STRONG><a name="[11f]"></a>tos_list_add_tail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(.text.tos_list_add_tail))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>

<P><STRONG><a name="[122]"></a>tos_list_del</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(.text.tos_list_del))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[11c]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
</UL>

<P><STRONG><a name="[126]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(.text.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
</UL>

<P><STRONG><a name="[1ae]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
</UL>

<P><STRONG><a name="[cd]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del_node
</UL>

<P><STRONG><a name="[cc]"></a>_list_del_node</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sched.o(.text._list_del_node))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_move_tail
</UL>

<P><STRONG><a name="[13d]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[13e]"></a>readyqueue_prio_insert</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_prio_insert))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>

<P><STRONG><a name="[135]"></a>readyqueue_prio_mark</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_prio_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[141]"></a>readyqueue_prio_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_prio_remove))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[136]"></a>tos_list_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_add))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[137]"></a>tos_list_add_tail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_add_tail))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_move_tail
</UL>

<P><STRONG><a name="[140]"></a>tos_list_del</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_del))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[134]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[13a]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>

<P><STRONG><a name="[13c]"></a>tos_list_move_tail</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tos_sched.o(.text.tos_list_move_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_move_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del_node
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
</UL>

<P><STRONG><a name="[1cc]"></a>knl_object_alloc_is_static</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_sem.o(.text.knl_object_alloc_is_static))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
</UL>

<P><STRONG><a name="[1ce]"></a>knl_object_alloc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sem.o(.text.knl_object_alloc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
</UL>

<P><STRONG><a name="[1cb]"></a>knl_object_alloc_set_static</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sem.o(.text.knl_object_alloc_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>

<P><STRONG><a name="[1cd]"></a>knl_object_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sem.o(.text.knl_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
</UL>

<P><STRONG><a name="[1ca]"></a>knl_object_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sem.o(.text.knl_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>

<P><STRONG><a name="[145]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sem.o(.text.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[144]"></a>sem_do_post</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_sem.o(.text.sem_do_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sem_do_post &rArr; pend_wakeup &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post_all
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>

<P><STRONG><a name="[4a]"></a>knl_idle_entry</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_sys.o(.text.knl_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = knl_idle_entry &rArr; task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(.text.knl_idle_init)
</UL>
<P><STRONG><a name="[1b0]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
</UL>

<P><STRONG><a name="[1b6]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[1d9]"></a>knl_object_alloc_is_dynamic</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_is_dynamic))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
</UL>

<P><STRONG><a name="[1d8]"></a>knl_object_alloc_is_static</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_is_static))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[194]"></a>knl_object_alloc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[1d6]"></a>knl_object_alloc_set_dynamic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_set_dynamic))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
</UL>

<P><STRONG><a name="[1d1]"></a>knl_object_alloc_set_static</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[196]"></a>knl_object_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[1d0]"></a>knl_object_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[1cf]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[188]"></a>task_do_destroy</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tos_task.o(.text.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_deleted
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[4c]"></a>task_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tos_task.o(.text.tos_task_create)
<LI> tos_task.o(.text.tos_task_create_tlib)
</UL>
<P><STRONG><a name="[192]"></a>task_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_task.o(.text.task_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn_tlib
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
</UL>

<P><STRONG><a name="[193]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_task.o(.text.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[18a]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(.text.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[18f]"></a>task_reset</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_task.o(.text.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_deinit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[18d]"></a>task_state_is_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[18b]"></a>task_state_is_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[18c]"></a>task_state_is_sleeping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1d7]"></a>task_state_is_suspended</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
</UL>

<P><STRONG><a name="[1da]"></a>task_state_reset_suspended</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_reset_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
</UL>

<P><STRONG><a name="[190]"></a>task_state_set_deleted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_set_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[1d4]"></a>task_state_set_ready</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_set_ready))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[1db]"></a>task_state_set_suspended</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_set_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
</UL>

<P><STRONG><a name="[1af]"></a>tos_list_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.tos_list_add))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy_dyn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_tlib
</UL>

<P><STRONG><a name="[18e]"></a>tos_list_del</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_task.o(.text.tos_list_del))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[189]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[195]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[1b2]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_tick.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[1b7]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_tick.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[19a]"></a>task_state_reset_sleeping</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_tick.o(.text.task_state_reset_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[198]"></a>task_state_set_sleeping</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_tick.o(.text.task_state_set_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[197]"></a>tick_task_place</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tos_tick.o(.text.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_task_place
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[199]"></a>tick_task_takeoff</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tos_tick.o(.text.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[19b]"></a>tos_list_add_tail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_tick.o(.text.tos_list_add_tail))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>

<P><STRONG><a name="[19d]"></a>tos_list_del</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_tick.o(.text.tos_list_del))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[19c]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_tick.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[1b3]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_timer.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[1b8]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_timer.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[149]"></a>timer_place</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tos_timer.o(.text.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>

<P><STRONG><a name="[148]"></a>timer_takeoff</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tos_timer.o(.text.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = timer_takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>

<P><STRONG><a name="[19f]"></a>tos_list_add_tail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_timer.o(.text.tos_list_add_tail))
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>

<P><STRONG><a name="[1a0]"></a>tos_list_del</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_timer.o(.text.tos_list_del))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[1a1]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_timer.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[102]"></a>find_pid</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tos_tlib.o(.text.find_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_set_pid
</UL>

<P><STRONG><a name="[bf]"></a>SysTick_Config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port_c.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[c0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port_c.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
